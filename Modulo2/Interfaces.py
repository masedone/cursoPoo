## üîπ INTERFACES vs CLASES ABSTRACTAS
# ¬øCu√°l es la diferencia entre una interfaz y una clase abstracta?

from abc import ABC, abstractmethod

print("=== DIFERENCIA: INTERFACES vs CLASES ABSTRACTAS ===\n")

# üî∏ INTERFACE (en Python simulada con ABC)
# - Solo define m√©todos (sin implementaci√≥n)
# - No tiene atributos/estado
# - Define un "contrato" puro

class IVolador(ABC):
    """INTERFACE: Solo define QU√â debe hacer un objeto volador"""
    
    @abstractmethod
    def volar(self):
        pass
    
    @abstractmethod
    def aterrizar(self):
        pass

class INadador(ABC):
    """INTERFACE: Solo define QU√â debe hacer un objeto nadador"""
    
    @abstractmethod
    def nadar(self):
        pass

# üî∏ CLASE ABSTRACTA
# - Puede tener m√©todos abstractos Y concretos
# - Puede tener atributos/estado
# - Define comportamiento com√∫n + contrato

class Animal(ABC):
    """CLASE ABSTRACTA: Tiene estado Y comportamiento com√∫n"""
    
    def __init__(self, nombre, peso):
        self.nombre = nombre  # ESTADO/ATRIBUTOS
        self.peso = peso
    
    # M√©todo concreto (ya implementado)
    def mostrar_info(self):
        print(f"Animal: {self.nombre}, Peso: {self.peso}kg")
    
    # M√©todo abstracto (debe implementarse)
    @abstractmethod
    def hacer_sonido(self):
        pass
    
    @abstractmethod
    def moverse(self):
        pass

print("=== COMPARACI√ìN PR√ÅCTICA ===")

# üî∏ IMPLEMENTACIONES QUE USAN AMBOS CONCEPTOS

class Pato(Animal, IVolador, INadador):
    """Pato: Hereda de Animal E implementa interfaces IVolador e INadador"""
    
    def __init__(self, nombre, peso):
        super().__init__(nombre, peso)
    
    # M√©todos abstractos de Animal (OBLIGATORIOS)
    def hacer_sonido(self):
        return "Cuac!"
    
    def moverse(self):
        return "Caminando con patas palmeadas"
    
    # M√©todos de IVolador (OBLIGATORIOS)
    def volar(self):
        return "Volando con alas"
    
    def aterrizar(self):
        return "Aterrizando en el agua"
    
    # M√©todos de INadador (OBLIGATORIOS)
    def nadar(self):
        return "Nadando en el agua"

class Perro(Animal):
    """Perro: Solo hereda de Animal (no vuela ni nada especial)"""
    
    def __init__(self, nombre, peso):
        super().__init__(nombre, peso)
    
    def hacer_sonido(self):
        return "Guau!"
    
    def moverse(self):
        return "Corriendo con patas"

class Avion(IVolador):
    """Avi√≥n: NO es Animal, pero S√ç implementa IVolador"""
    
    def __init__(self, modelo):
        self.modelo = modelo
    
    def volar(self):
        return f"Avi√≥n {self.modelo} volando con motores"
    
    def aterrizar(self):
        return f"Avi√≥n {self.modelo} aterrizando en pista"

# üî∏ USANDO LAS IMPLEMENTACIONES

print("=== ANIMAL CON M√öLTIPLES HABILIDADES ===")
pato = Pato("Donald", 2.5)
pato.mostrar_info()  # M√©todo de la clase abstracta Animal
print(f"Sonido: {pato.hacer_sonido()}")
print(f"Movimiento: {pato.moverse()}")
print(f"Volando: {pato.volar()}")
print(f"Nadando: {pato.nadar()}")
print(f"Aterrizando: {pato.aterrizar()}")
print()

print("=== ANIMAL SIMPLE ===")
perro = Perro("Firulais", 15)
perro.mostrar_info()
print(f"Sonido: {perro.hacer_sonido()}")
print(f"Movimiento: {perro.moverse()}")
print()

print("=== OBJETO NO-ANIMAL QUE VUELA ===")
avion = Avion("Boeing 747")
print(f"Volando: {avion.volar()}")
print(f"Aterrizando: {avion.aterrizar()}")
print()

# üî∏ POLIMORFISMO CON INTERFACES
print("=== POLIMORFISMO CON INTERFACES ===")
print("Todos los objetos que pueden volar:")

voladores = [pato, avion]  # Pato y Avi√≥n implementan IVolador
for volador in voladores:
    print(f"- {volador.volar()}")

print("\nTodos los animales:")
animales = [pato, perro]  # Ambos heredan de Animal
for animal in animales:
    animal.mostrar_info()
    print(f"  Sonido: {animal.hacer_sonido()}")

print("\n=== TABLA COMPARATIVA ===")
print("| Aspecto              | INTERFACE           | CLASE ABSTRACTA     |")
print("|----------------------|---------------------|---------------------|")
print("| M√©todos concretos    | ‚ùå No               | ‚úÖ S√≠               |")
print("| M√©todos abstractos   | ‚úÖ Solo abstractos  | ‚úÖ Ambos tipos      |")
print("| Atributos/Estado     | ‚ùå No               | ‚úÖ S√≠               |")
print("| Herencia m√∫ltiple    | ‚úÖ S√≠ (interfaces)  | ‚ùå No (solo una)    |")
print("| Constructor          | ‚ùå No               | ‚úÖ S√≠               |")
print("| Prop√≥sito            | Contrato puro       | Comportamiento base |")

print("\n=== CU√ÅNDO USAR CADA UNO ===")
print("üî∏ USA INTERFACE cuando:")
print("  ‚úÖ Solo defines QU√â debe hacer (contrato)")
print("  ‚úÖ No hay comportamiento com√∫n")
print("  ‚úÖ Quieres m√∫ltiples 'habilidades'")
print("  ‚úÖ Ejemplo: IVolador, INadador, IConducible")

print("\nüî∏ USA CLASE ABSTRACTA cuando:")
print("  ‚úÖ Tienes comportamiento com√∫n Y m√©todos obligatorios")
print("  ‚úÖ Quieres compartir estado/atributos")
print("  ‚úÖ Hay una relaci√≥n 'es-un'")
print("  ‚úÖ Ejemplo: Animal, Vehiculo, Forma")

print("\nüéØ EN RESUMEN:")
print("INTERFACE = 'puede hacer' (habilidades)")
print("CLASE ABSTRACTA = 'es un tipo de' (herencia)")
