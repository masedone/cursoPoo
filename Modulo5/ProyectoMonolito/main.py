#!/usr/bin/env python3
"""
üèõÔ∏è PROYECTO MONOL√çTICO - Sistema de Inventario
Toda la aplicaci√≥n est√° contenida en un solo archivo principal
"""

import json
import datetime
from typing import List, Dict, Optional

class SistemaInventarioMonolitico:
    """
    MONOLITO: Una sola clase contiene toda la funcionalidad del sistema
    - Base de datos (simulada)
    - L√≥gica de negocio
    - Validaciones
    - Interfaz de usuario
    - Reportes
    - Configuraci√≥n
    """
    
    def __init__(self):
        # Configuraci√≥n del sistema
        self.version = "1.0.0"
        self.nombre_empresa = "TechStore S.L."
        self.archivo_datos = "inventario.json"
        
        # Base de datos simulada en memoria
        self.productos = []
        self.categorias = ["Electr√≥nicos", "Oficina", "Hogar", "Deportes"]
        self.proveedores = ["Proveedor A", "Proveedor B", "Proveedor C"]
        self.historial_movimientos = []
        self.usuarios = ["admin", "vendedor1", "vendedor2"]
        self.usuario_actual = "admin"
        
        # Contadores
        self.siguiente_id_producto = 1
        self.siguiente_id_movimiento = 1
        
        # Configuraci√≥n de negocio
        self.stock_minimo_default = 5
        self.iva_porcentaje = 21.0
        
        print(f"üèõÔ∏è {self.nombre_empresa} - Sistema de Inventario v{self.version}")
        print("="*60)
        
        # Cargar datos iniciales
        self._inicializar_datos()
    
    def _inicializar_datos(self):
        """Inicializa datos de prueba del sistema"""
        productos_iniciales = [
            ("Laptop HP Pavilion", "Electr√≥nicos", 899.99, 10, "Proveedor A"),
            ("Mouse Inal√°mbrico", "Electr√≥nicos", 25.99, 50, "Proveedor B"),
            ("Silla Ergon√≥mica", "Oficina", 199.99, 8, "Proveedor A"),
            ("Escritorio Blanco", "Oficina", 149.99, 5, "Proveedor C"),
            ("Aspiradora Robot", "Hogar", 299.99, 3, "Proveedor B"),
            ("Bal√≥n de F√∫tbol", "Deportes", 29.99, 15, "Proveedor C")
        ]
        
        for nombre, categoria, precio, stock, proveedor in productos_iniciales:
            self._crear_producto_interno(nombre, categoria, precio, stock, proveedor)
        
        print(f"‚úÖ Sistema inicializado con {len(self.productos)} productos")
    
    def _crear_producto_interno(self, nombre, categoria, precio, stock, proveedor):
        """M√©todo interno para crear productos sin validaciones extras"""
        producto = {
            "id": self.siguiente_id_producto,
            "nombre": nombre,
            "categoria": categoria,
            "precio_sin_iva": precio,
            "precio_con_iva": precio * (1 + self.iva_porcentaje / 100),
            "stock": stock,
            "stock_minimo": self.stock_minimo_default,
            "proveedor": proveedor,
            "activo": True,
            "fecha_creacion": datetime.datetime.now().isoformat(),
            "usuario_creacion": self.usuario_actual
        }
        self.productos.append(producto)
        self.siguiente_id_producto += 1
        
        # Registrar movimiento
        self._registrar_movimiento("ALTA", producto["id"], stock, "Producto creado")
    
    def mostrar_menu_principal(self):
        """Interfaz de usuario - Men√∫ principal"""
        while True:
            print(f"\nüèõÔ∏è SISTEMA DE INVENTARIO MONOL√çTICO")
            print(f"Usuario: {self.usuario_actual} | Productos: {len(self.productos)}")
            print("="*50)
            print("1. üì¶ Gesti√≥n de Productos")
            print("2. üìä Inventario y Stock")
            print("3. üìà Reportes y Estad√≠sticas")
            print("4. üîÑ Movimientos de Stock")
            print("5. ‚öôÔ∏è Configuraci√≥n")
            print("6. üíæ Guardar/Cargar Datos")
            print("7. üö™ Salir")
            print("-"*50)
            
            opcion = input("Selecciona una opci√≥n (1-7): ").strip()
            
            if opcion == "1":
                self._menu_productos()
            elif opcion == "2":
                self._menu_inventario()
            elif opcion == "3":
                self._menu_reportes()
            elif opcion == "4":
                self._menu_movimientos()
            elif opcion == "5":
                self._menu_configuracion()
            elif opcion == "6":
                self._menu_datos()
            elif opcion == "7":
                print("üëã ¬°Hasta luego!")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    
    def _menu_productos(self):
        """Submen√∫ de gesti√≥n de productos"""
        while True:
            print(f"\nüì¶ GESTI√ìN DE PRODUCTOS")
            print("="*30)
            print("1. Ver todos los productos")
            print("2. Buscar producto")
            print("3. Agregar producto")
            print("4. Modificar producto")
            print("5. Eliminar producto")
            print("6. Volver al men√∫ principal")
            
            opcion = input("Opci√≥n: ").strip()
            
            if opcion == "1":
                self.listar_productos()
            elif opcion == "2":
                criterio = input("Buscar por nombre: ")
                self.buscar_productos(criterio)
            elif opcion == "3":
                self.agregar_producto_interactivo()
            elif opcion == "4":
                self.modificar_producto_interactivo()
            elif opcion == "5":
                self.eliminar_producto_interactivo()
            elif opcion == "6":
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    
    def listar_productos(self, mostrar_inactivos=False):
        """Muestra lista de todos los productos"""
        productos_filtrados = [p for p in self.productos if mostrar_inactivos or p["activo"]]
        
        if not productos_filtrados:
            print("üì≠ No hay productos para mostrar")
            return
        
        print(f"\nüìã LISTA DE PRODUCTOS ({len(productos_filtrados)} total)")
        print("="*80)
        print(f"{'ID':<4} {'Nombre':<25} {'Categor√≠a':<12} {'Precio':<10} {'Stock':<6} {'Estado':<8}")
        print("-"*80)
        
        for producto in productos_filtrados:
            estado = "‚úÖ Activo" if producto["activo"] else "‚ùå Inactivo"
            stock_alerta = "‚ö†Ô∏è" if producto["stock"] <= producto["stock_minimo"] else "‚úÖ"
            
            print(f"{producto['id']:<4} {producto['nombre']:<25} {producto['categoria']:<12} "
                  f"{producto['precio_sin_iva']:<10.2f}‚Ç¨ {stock_alerta}{producto['stock']:<5} {estado}")
    
    def buscar_productos(self, criterio):
        """Busca productos por nombre o categor√≠a"""
        if not criterio:
            print("‚ùå Debe ingresar un criterio de b√∫squeda")
            return
        
        criterio_lower = criterio.lower()
        resultados = []
        
        for producto in self.productos:
            if (criterio_lower in producto["nombre"].lower() or 
                criterio_lower in producto["categoria"].lower() or
                criterio_lower in producto["proveedor"].lower()):
                resultados.append(producto)
        
        if not resultados:
            print(f"üì≠ No se encontraron productos con '{criterio}'")
            return
        
        print(f"\nüîç RESULTADOS DE B√öSQUEDA: '{criterio}' ({len(resultados)} encontrados)")
        print("="*70)
        
        for producto in resultados:
            print(f"üì¶ ID: {producto['id']} | {producto['nombre']}")
            print(f"   üìÇ Categor√≠a: {producto['categoria']}")
            print(f"   üí∞ Precio: {producto['precio_sin_iva']:.2f}‚Ç¨ (sin IVA) | {producto['precio_con_iva']:.2f}‚Ç¨ (con IVA)")
            print(f"   üìä Stock: {producto['stock']} unidades | M√≠nimo: {producto['stock_minimo']}")
            print(f"   üè¢ Proveedor: {producto['proveedor']}")
            print()
    
    def agregar_producto_interactivo(self):
        """Interfaz para agregar un nuevo producto"""
        print(f"\n‚ûï AGREGAR NUEVO PRODUCTO")
        print("="*30)
        
        try:
            # Recopilar datos
            nombre = input("Nombre del producto: ").strip()
            if not nombre or len(nombre) < 3:
                print("‚ùå El nombre debe tener al menos 3 caracteres")
                return
            
            print(f"Categor√≠as disponibles: {', '.join(self.categorias)}")
            categoria = input("Categor√≠a: ").strip()
            if categoria not in self.categorias:
                print("‚ùå Categor√≠a no v√°lida")
                return
            
            precio = float(input("Precio sin IVA (‚Ç¨): "))
            if precio <= 0:
                print("‚ùå El precio debe ser mayor a 0")
                return
            
            stock = int(input("Stock inicial: "))
            if stock < 0:
                print("‚ùå El stock no puede ser negativo")
                return
            
            stock_minimo = int(input(f"Stock m√≠nimo (default {self.stock_minimo_default}): ") or self.stock_minimo_default)
            
            print(f"Proveedores disponibles: {', '.join(self.proveedores)}")
            proveedor = input("Proveedor: ").strip()
            if proveedor not in self.proveedores:
                print("‚ùå Proveedor no v√°lido")
                return
            
            # Crear producto
            producto = {
                "id": self.siguiente_id_producto,
                "nombre": nombre,
                "categoria": categoria,
                "precio_sin_iva": precio,
                "precio_con_iva": precio * (1 + self.iva_porcentaje / 100),
                "stock": stock,
                "stock_minimo": stock_minimo,
                "proveedor": proveedor,
                "activo": True,
                "fecha_creacion": datetime.datetime.now().isoformat(),
                "usuario_creacion": self.usuario_actual
            }
            
            self.productos.append(producto)
            self.siguiente_id_producto += 1
            
            # Registrar movimiento
            self._registrar_movimiento("ALTA", producto["id"], stock, "Producto agregado manualmente")
            
            print(f"‚úÖ Producto '{nombre}' agregado exitosamente con ID: {producto['id']}")
            print(f"   üí∞ Precio con IVA ({self.iva_porcentaje}%): {producto['precio_con_iva']:.2f}‚Ç¨")
            
        except ValueError as e:
            print(f"‚ùå Error en los datos ingresados: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def modificar_producto_interactivo(self):
        """Interfaz para modificar un producto existente"""
        print(f"\n‚úèÔ∏è MODIFICAR PRODUCTO")
        print("="*25)
        
        try:
            producto_id = int(input("ID del producto a modificar: "))
            producto = self._buscar_producto_por_id(producto_id)
            
            if not producto:
                print("‚ùå Producto no encontrado")
                return
            
            if not producto["activo"]:
                print("‚ùå No se puede modificar un producto inactivo")
                return
            
            print(f"\nüì¶ Producto actual: {producto['nombre']}")
            print(f"   üìÇ Categor√≠a: {producto['categoria']}")
            print(f"   üí∞ Precio: {producto['precio_sin_iva']:.2f}‚Ç¨")
            print(f"   üìä Stock: {producto['stock']}")
            print(f"   üè¢ Proveedor: {producto['proveedor']}")
            
            print(f"\n¬øQu√© desea modificar?")
            print("1. Precio")
            print("2. Stock m√≠nimo")
            print("3. Proveedor")
            print("4. Cancelar")
            
            opcion = input("Opci√≥n: ").strip()
            
            if opcion == "1":
                nuevo_precio = float(input(f"Nuevo precio sin IVA (actual: {producto['precio_sin_iva']:.2f}‚Ç¨): "))
                if nuevo_precio > 0:
                    producto["precio_sin_iva"] = nuevo_precio
                    producto["precio_con_iva"] = nuevo_precio * (1 + self.iva_porcentaje / 100)
                    print(f"‚úÖ Precio actualizado a {nuevo_precio:.2f}‚Ç¨ (sin IVA)")
                else:
                    print("‚ùå Precio inv√°lido")
            
            elif opcion == "2":
                nuevo_minimo = int(input(f"Nuevo stock m√≠nimo (actual: {producto['stock_minimo']}): "))
                if nuevo_minimo >= 0:
                    producto["stock_minimo"] = nuevo_minimo
                    print(f"‚úÖ Stock m√≠nimo actualizado a {nuevo_minimo}")
                else:
                    print("‚ùå Stock m√≠nimo inv√°lido")
            
            elif opcion == "3":
                print(f"Proveedores disponibles: {', '.join(self.proveedores)}")
                nuevo_proveedor = input(f"Nuevo proveedor (actual: {producto['proveedor']}): ").strip()
                if nuevo_proveedor in self.proveedores:
                    producto["proveedor"] = nuevo_proveedor
                    print(f"‚úÖ Proveedor actualizado a {nuevo_proveedor}")
                else:
                    print("‚ùå Proveedor inv√°lido")
            
            elif opcion == "4":
                print("Modificaci√≥n cancelada")
            else:
                print("‚ùå Opci√≥n no v√°lida")
                
        except ValueError as e:
            print(f"‚ùå Error en los datos: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def eliminar_producto_interactivo(self):
        """Interfaz para eliminar (desactivar) un producto"""
        print(f"\nüóëÔ∏è ELIMINAR PRODUCTO")
        print("="*22)
        
        try:
            producto_id = int(input("ID del producto a eliminar: "))
            producto = self._buscar_producto_por_id(producto_id)
            
            if not producto:
                print("‚ùå Producto no encontrado")
                return
            
            if not producto["activo"]:
                print("‚ùå El producto ya est√° inactivo")
                return
            
            print(f"\nüì¶ Producto a eliminar:")
            print(f"   ID: {producto['id']}")
            print(f"   Nombre: {producto['nombre']}")
            print(f"   Stock actual: {producto['stock']}")
            
            if producto['stock'] > 0:
                print(f"‚ö†Ô∏è ATENCI√ìN: El producto tiene stock ({producto['stock']} unidades)")
                print("Al eliminarlo, el stock se perder√° del inventario")
            
            confirmacion = input("\n¬øEst√° seguro de eliminar este producto? (si/no): ").lower().strip()
            
            if confirmacion in ['si', 's√≠', 's', 'yes', 'y']:
                # Registrar movimiento de baja si hay stock
                if producto['stock'] > 0:
                    self._registrar_movimiento("BAJA", producto_id, -producto['stock'], "Producto eliminado")
                
                producto["activo"] = False
                print(f"‚úÖ Producto '{producto['nombre']}' eliminado exitosamente")
            else:
                print("Eliminaci√≥n cancelada")
                
        except ValueError as e:
            print(f"‚ùå Error en los datos: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def _menu_inventario(self):
        """Submen√∫ de inventario y stock"""
        while True:
            print(f"\nüìä INVENTARIO Y STOCK")
            print("="*25)
            print("1. Estado general del inventario")
            print("2. Productos con stock bajo")
            print("3. Entrada de stock")
            print("4. Salida de stock")
            print("5. Ajuste de inventario")
            print("6. Volver al men√∫ principal")
            
            opcion = input("Opci√≥n: ").strip()
            
            if opcion == "1":
                self.mostrar_estado_inventario()
            elif opcion == "2":
                self.mostrar_stock_bajo()
            elif opcion == "3":
                self.entrada_stock_interactiva()
            elif opcion == "4":
                self.salida_stock_interactiva()
            elif opcion == "5":
                self.ajuste_inventario_interactivo()
            elif opcion == "6":
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    
    def mostrar_estado_inventario(self):
        """Muestra el estado general del inventario"""
        productos_activos = [p for p in self.productos if p["activo"]]
        
        if not productos_activos:
            print("üì≠ No hay productos activos en el inventario")
            return
        
        # Calcular estad√≠sticas
        total_productos = len(productos_activos)
        valor_total_sin_iva = sum(p["precio_sin_iva"] * p["stock"] for p in productos_activos)
        valor_total_con_iva = sum(p["precio_con_iva"] * p["stock"] for p in productos_activos)
        stock_total = sum(p["stock"] for p in productos_activos)
        productos_sin_stock = len([p for p in productos_activos if p["stock"] == 0])
        productos_stock_bajo = len([p for p in productos_activos if 0 < p["stock"] <= p["stock_minimo"]])
        
        # Estad√≠sticas por categor√≠a
        stats_categoria = {}
        for producto in productos_activos:
            cat = producto["categoria"]
            if cat not in stats_categoria:
                stats_categoria[cat] = {"productos": 0, "stock": 0, "valor": 0}
            stats_categoria[cat]["productos"] += 1
            stats_categoria[cat]["stock"] += producto["stock"]
            stats_categoria[cat]["valor"] += producto["precio_sin_iva"] * producto["stock"]
        
        print(f"\nüìä ESTADO GENERAL DEL INVENTARIO")
        print("="*40)
        print(f"üì¶ Total productos activos: {total_productos}")
        print(f"üìä Stock total: {stock_total:,} unidades")
        print(f"üí∞ Valor inventario (sin IVA): {valor_total_sin_iva:,.2f}‚Ç¨")
        print(f"üí∞ Valor inventario (con IVA): {valor_total_con_iva:,.2f}‚Ç¨")
        print(f"üì≠ Productos sin stock: {productos_sin_stock}")
        print(f"‚ö†Ô∏è Productos con stock bajo: {productos_stock_bajo}")
        
        print(f"\nüìÇ ESTAD√çSTICAS POR CATEGOR√çA:")
        print("-"*50)
        for categoria, stats in stats_categoria.items():
            print(f"{categoria:<15} | {stats['productos']:>3} productos | {stats['stock']:>5} unidades | {stats['valor']:>10.2f}‚Ç¨")
    
    def mostrar_stock_bajo(self):
        """Muestra productos con stock bajo o sin stock"""
        productos_activos = [p for p in self.productos if p["activo"]]
        productos_alerta = [p for p in productos_activos if p["stock"] <= p["stock_minimo"]]
        
        if not productos_alerta:
            print("‚úÖ No hay productos con stock bajo")
            return
        
        print(f"\n‚ö†Ô∏è PRODUCTOS CON STOCK BAJO ({len(productos_alerta)} productos)")
        print("="*60)
        print(f"{'ID':<4} {'Nombre':<25} {'Stock':<8} {'M√≠nimo':<8} {'Estado'}")
        print("-"*60)
        
        for producto in productos_alerta:
            if producto["stock"] == 0:
                estado = "üî¥ SIN STOCK"
            elif producto["stock"] <= producto["stock_minimo"]:
                estado = "‚ö†Ô∏è STOCK BAJO"
            else:
                estado = "‚úÖ OK"
            
            print(f"{producto['id']:<4} {producto['nombre']:<25} {producto['stock']:<8} "
                  f"{producto['stock_minimo']:<8} {estado}")
    
    def entrada_stock_interactiva(self):
        """Interfaz para registrar entrada de stock"""
        print(f"\nüì• ENTRADA DE STOCK")
        print("="*20)
        
        try:
            producto_id = int(input("ID del producto: "))
            producto = self._buscar_producto_por_id(producto_id)
            
            if not producto:
                print("‚ùå Producto no encontrado")
                return
            
            if not producto["activo"]:
                print("‚ùå No se puede modificar stock de producto inactivo")
                return
            
            print(f"üì¶ Producto: {producto['nombre']}")
            print(f"üìä Stock actual: {producto['stock']}")
            
            cantidad = int(input("Cantidad a agregar: "))
            if cantidad <= 0:
                print("‚ùå La cantidad debe ser mayor a 0")
                return
            
            motivo = input("Motivo (opcional): ").strip() or "Entrada de stock"
            
            # Actualizar stock
            producto["stock"] += cantidad
            
            # Registrar movimiento
            self._registrar_movimiento("ENTRADA", producto_id, cantidad, motivo)
            
            print(f"‚úÖ Stock actualizado: {producto['stock']} unidades (+{cantidad})")
            
        except ValueError as e:
            print(f"‚ùå Error en los datos: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def salida_stock_interactiva(self):
        """Interfaz para registrar salida de stock"""
        print(f"\nüì§ SALIDA DE STOCK")
        print("="*19)
        
        try:
            producto_id = int(input("ID del producto: "))
            producto = self._buscar_producto_por_id(producto_id)
            
            if not producto:
                print("‚ùå Producto no encontrado")
                return
            
            if not producto["activo"]:
                print("‚ùå No se puede modificar stock de producto inactivo")
                return
            
            print(f"üì¶ Producto: {producto['nombre']}")
            print(f"üìä Stock actual: {producto['stock']}")
            
            cantidad = int(input("Cantidad a retirar: "))
            if cantidad <= 0:
                print("‚ùå La cantidad debe ser mayor a 0")
                return
            
            if cantidad > producto["stock"]:
                print(f"‚ùå Stock insuficiente. Disponible: {producto['stock']}")
                return
            
            motivo = input("Motivo (opcional): ").strip() or "Salida de stock"
            
            # Actualizar stock
            producto["stock"] -= cantidad
            
            # Registrar movimiento
            self._registrar_movimiento("SALIDA", producto_id, -cantidad, motivo)
            
            print(f"‚úÖ Stock actualizado: {producto['stock']} unidades (-{cantidad})")
            
            # Alerta si queda stock bajo
            if producto["stock"] <= producto["stock_minimo"]:
                print(f"‚ö†Ô∏è ALERTA: Stock bajo ({producto['stock']} <= {producto['stock_minimo']})")
            
        except ValueError as e:
            print(f"‚ùå Error en los datos: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def ajuste_inventario_interactivo(self):
        """Interfaz para ajustar inventario (correcciones)"""
        print(f"\nüîß AJUSTE DE INVENTARIO")
        print("="*25)
        
        try:
            producto_id = int(input("ID del producto: "))
            producto = self._buscar_producto_por_id(producto_id)
            
            if not producto:
                print("‚ùå Producto no encontrado")
                return
            
            if not producto["activo"]:
                print("‚ùå No se puede ajustar stock de producto inactivo")
                return
            
            print(f"üì¶ Producto: {producto['nombre']}")
            print(f"üìä Stock actual: {producto['stock']}")
            
            nuevo_stock = int(input("Nuevo stock correcto: "))
            if nuevo_stock < 0:
                print("‚ùå El stock no puede ser negativo")
                return
            
            diferencia = nuevo_stock - producto["stock"]
            
            if diferencia == 0:
                print("‚ÑπÔ∏è El stock ya es correcto")
                return
            
            motivo = input("Motivo del ajuste: ").strip()
            if not motivo:
                motivo = f"Ajuste de inventario ({'+' if diferencia > 0 else ''}{diferencia})"
            
            print(f"\nüìã RESUMEN DEL AJUSTE:")
            print(f"   Stock actual: {producto['stock']}")
            print(f"   Stock nuevo: {nuevo_stock}")
            print(f"   Diferencia: {'+' if diferencia > 0 else ''}{diferencia}")
            print(f"   Motivo: {motivo}")
            
            confirmacion = input("\n¬øConfirmar ajuste? (si/no): ").lower().strip()
            
            if confirmacion in ['si', 's√≠', 's', 'yes', 'y']:
                # Actualizar stock
                producto["stock"] = nuevo_stock
                
                # Registrar movimiento
                self._registrar_movimiento("AJUSTE", producto_id, diferencia, motivo)
                
                print(f"‚úÖ Inventario ajustado: {nuevo_stock} unidades")
            else:
                print("Ajuste cancelado")
            
        except ValueError as e:
            print(f"‚ùå Error en los datos: {e}")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    def _menu_reportes(self):
        """Submen√∫ de reportes y estad√≠sticas"""
        while True:
            print(f"\nüìà REPORTES Y ESTAD√çSTICAS")
            print("="*30)
            print("1. Reporte de productos")
            print("2. Reporte de movimientos")
            print("3. An√°lisis de categor√≠as")
            print("4. An√°lisis de proveedores")
            print("5. Productos m√°s/menos valiosos")
            print("6. Exportar datos")
            print("7. Volver al men√∫ principal")
            
            opcion = input("Opci√≥n: ").strip()
            
            if opcion == "1":
                self.generar_reporte_productos()
            elif opcion == "2":
                self.generar_reporte_movimientos()
            elif opcion == "3":
                self.generar_analisis_categorias()
            elif opcion == "4":
                self.generar_analisis_proveedores()
            elif opcion == "5":
                self.generar_ranking_productos()
            elif opcion == "6":
                self.exportar_datos()
            elif opcion == "7":
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    
    def generar_reporte_productos(self):
        """Genera reporte detallado de productos"""
        productos_activos = [p for p in self.productos if p["activo"]]
        
        if not productos_activos:
            print("üì≠ No hay productos activos")
            return
        
        print(f"\nüìã REPORTE DETALLADO DE PRODUCTOS")
        print("="*50)
        print(f"Fecha: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Total productos: {len(productos_activos)}")
        print()
        
        for producto in productos_activos:
            valor_stock = producto["precio_sin_iva"] * producto["stock"]
            estado_stock = "üî¥" if producto["stock"] == 0 else "‚ö†Ô∏è" if producto["stock"] <= producto["stock_minimo"] else "‚úÖ"
            
            print(f"üì¶ {producto['nombre']} (ID: {producto['id']})")
            print(f"   üìÇ Categor√≠a: {producto['categoria']}")
            print(f"   üè¢ Proveedor: {producto['proveedor']}")
            print(f"   üí∞ Precio: {producto['precio_sin_iva']:.2f}‚Ç¨ (sin IVA) | {producto['precio_con_iva']:.2f}‚Ç¨ (con IVA)")
            print(f"   üìä Stock: {estado_stock} {producto['stock']} unidades (m√≠nimo: {producto['stock_minimo']})")
            print(f"   üíµ Valor en stock: {valor_stock:.2f}‚Ç¨")
            print(f"   üìÖ Creado: {producto['fecha_creacion'][:10]} por {producto['usuario_creacion']}")
            print()
    
    def generar_reporte_movimientos(self):
        """Genera reporte de movimientos de stock"""
        if not self.historial_movimientos:
            print("üì≠ No hay movimientos registrados")
            return
        
        # Mostrar √∫ltimos 20 movimientos
        movimientos_recientes = self.historial_movimientos[-20:]
        
        print(f"\nüîÑ REPORTE DE MOVIMIENTOS (√∫ltimos {len(movimientos_recientes)})")
        print("="*60)
        print(f"{'ID':<4} {'Fecha':<12} {'Tipo':<8} {'Producto':<20} {'Cant.':<6} {'Motivo'}")
        print("-"*60)
        
        for mov in reversed(movimientos_recientes):
            producto = self._buscar_producto_por_id(mov["producto_id"])
            nombre_producto = producto["nombre"][:20] if producto else "N/A"
            fecha = mov["fecha"][:10]
            
            print(f"{mov['id']:<4} {fecha:<12} {mov['tipo']:<8} {nombre_producto:<20} "
                  f"{mov['cantidad']:>+6} {mov['motivo']}")
    
    def generar_analisis_categorias(self):
        """An√°lisis por categor√≠as"""
        productos_activos = [p for p in self.productos if p["activo"]]
        
        if not productos_activos:
            print("üì≠ No hay productos activos")
            return
        
        # Agrupar por categor√≠as
        stats_categoria = {}
        for producto in productos_activos:
            cat = producto["categoria"]
            if cat not in stats_categoria:
                stats_categoria[cat] = {
                    "productos": 0,
                    "stock_total": 0,
                    "valor_sin_iva": 0,
                    "valor_con_iva": 0,
                    "stock_bajo": 0,
                    "sin_stock": 0
                }
            
            stats = stats_categoria[cat]
            stats["productos"] += 1
            stats["stock_total"] += producto["stock"]
            stats["valor_sin_iva"] += producto["precio_sin_iva"] * producto["stock"]
            stats["valor_con_iva"] += producto["precio_con_iva"] * producto["stock"]
            
            if producto["stock"] == 0:
                stats["sin_stock"] += 1
            elif producto["stock"] <= producto["stock_minimo"]:
                stats["stock_bajo"] += 1
        
        print(f"\nüìÇ AN√ÅLISIS POR CATEGOR√çAS")
        print("="*40)
        
        for categoria, stats in sorted(stats_categoria.items()):
            print(f"\nüìÅ {categoria.upper()}")
            print(f"   üì¶ Productos: {stats['productos']}")
            print(f"   üìä Stock total: {stats['stock_total']:,} unidades")
            print(f"   üí∞ Valor inventario: {stats['valor_sin_iva']:,.2f}‚Ç¨ (sin IVA)")
            print(f"   üí∞ Valor con IVA: {stats['valor_con_iva']:,.2f}‚Ç¨")
            print(f"   ‚ö†Ô∏è Stock bajo: {stats['stock_bajo']} productos")
            print(f"   üî¥ Sin stock: {stats['sin_stock']} productos")
    
    def generar_analisis_proveedores(self):
        """An√°lisis por proveedores"""
        productos_activos = [p for p in self.productos if p["activo"]]
        
        if not productos_activos:
            print("üì≠ No hay productos activos")
            return
        
        # Agrupar por proveedores
        stats_proveedor = {}
        for producto in productos_activos:
            prov = producto["proveedor"]
            if prov not in stats_proveedor:
                stats_proveedor[prov] = {
                    "productos": 0,
                    "categorias": set(),
                    "stock_total": 0,
                    "valor_inventario": 0
                }
            
            stats = stats_proveedor[prov]
            stats["productos"] += 1
            stats["categorias"].add(producto["categoria"])
            stats["stock_total"] += producto["stock"]
            stats["valor_inventario"] += producto["precio_sin_iva"] * producto["stock"]
        
        print(f"\nüè¢ AN√ÅLISIS POR PROVEEDORES")
        print("="*35)
        
        for proveedor, stats in sorted(stats_proveedor.items()):
            print(f"\nüè¢ {proveedor.upper()}")
            print(f"   üì¶ Productos: {stats['productos']}")
            print(f"   üìÇ Categor√≠as: {', '.join(sorted(stats['categorias']))}")
            print(f"   üìä Stock total: {stats['stock_total']:,} unidades")
            print(f"   üí∞ Valor inventario: {stats['valor_inventario']:,.2f}‚Ç¨")
    
    def generar_ranking_productos(self):
        """Ranking de productos por valor"""
        productos_activos = [p for p in self.productos if p["activo"]]
        
        if not productos_activos:
            print("üì≠ No hay productos activos")
            return
        
        # Calcular valor de inventario para cada producto
        productos_con_valor = []
        for producto in productos_activos:
            valor = producto["precio_sin_iva"] * producto["stock"]
            productos_con_valor.append((producto, valor))
        
        # Ordenar por valor descendente
        productos_con_valor.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nüèÜ RANKING DE PRODUCTOS POR VALOR DE INVENTARIO")
        print("="*55)
        print(f"{'Pos':<4} {'Producto':<25} {'Stock':<8} {'P.Unit':<10} {'Valor Total'}")
        print("-"*55)
        
        for i, (producto, valor) in enumerate(productos_con_valor[:10], 1):
            print(f"{i:<4} {producto['nombre'][:25]:<25} {producto['stock']:<8} "
                  f"{producto['precio_sin_iva']:<10.2f}‚Ç¨ {valor:>10.2f}‚Ç¨")
        
        if len(productos_con_valor) > 10:
            print(f"\n... y {len(productos_con_valor) - 10} productos m√°s")
    
    def exportar_datos(self):
        """Exporta datos del sistema"""
        print(f"\nüíæ EXPORTAR DATOS")
        print("="*18)
        print("1. Exportar productos (JSON)")
        print("2. Exportar movimientos (JSON)")
        print("3. Exportar todo (JSON)")
        print("4. Cancelar")
        
        opcion = input("Opci√≥n: ").strip()
        
        try:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if opcion == "1":
                filename = f"productos_{timestamp}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.productos, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ Productos exportados a: {filename}")
            
            elif opcion == "2":
                filename = f"movimientos_{timestamp}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.historial_movimientos, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ Movimientos exportados a: {filename}")
            
            elif opcion == "3":
                data = {
                    "sistema": {
                        "version": self.version,
                        "empresa": self.nombre_empresa,
                        "fecha_exportacion": datetime.datetime.now().isoformat()
                    },
                    "productos": self.productos,
                    "movimientos": self.historial_movimientos,
                    "configuracion": {
                        "categorias": self.categorias,
                        "proveedores": self.proveedores,
                        "iva_porcentaje": self.iva_porcentaje,
                        "stock_minimo_default": self.stock_minimo_default
                    }
                }
                filename = f"inventario_completo_{timestamp}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ Datos completos exportados a: {filename}")
            
            elif opcion == "4":
                print("Exportaci√≥n cancelada")
            else:
                print("‚ùå Opci√≥n no v√°lida")
                
        except Exception as e:
            print(f"‚ùå Error al exportar: {e}")
    
    def _menu_movimientos(self):
        """Submen√∫ de movimientos de stock"""
        print(f"\nüîÑ HISTORIAL DE MOVIMIENTOS")
        print("="*32)
        
        if not self.historial_movimientos:
            print("üì≠ No hay movimientos registrados")
            input("Presiona Enter para continuar...")
            return
        
        # Mostrar estad√≠sticas de movimientos
        total_movimientos = len(self.historial_movimientos)
        tipos_movimientos = {}
        
        for mov in self.historial_movimientos:
            tipo = mov["tipo"]
            tipos_movimientos[tipo] = tipos_movimientos.get(tipo, 0) + 1
        
        print(f"üìä Total movimientos: {total_movimientos}")
        for tipo, cantidad in tipos_movimientos.items():
            print(f"   {tipo}: {cantidad} movimientos")
        
        print(f"\nüîÑ √öLTIMOS 15 MOVIMIENTOS:")
        print("-"*70)
        
        movimientos_recientes = self.historial_movimientos[-15:]
        for mov in reversed(movimientos_recientes):
            producto = self._buscar_producto_por_id(mov["producto_id"])
            nombre_producto = producto["nombre"] if producto else "Producto eliminado"
            
            print(f"{mov['fecha'][:16]} | {mov['tipo']:<8} | {nombre_producto[:25]:<25} | "
                  f"{mov['cantidad']:>+4} | {mov['motivo']}")
        
        input("\nPresiona Enter para continuar...")
    
    def _menu_configuracion(self):
        """Submen√∫ de configuraci√≥n del sistema"""
        while True:
            print(f"\n‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA")
            print("="*32)
            print(f"Usuario actual: {self.usuario_actual}")
            print(f"IVA: {self.iva_porcentaje}%")
            print(f"Stock m√≠nimo por defecto: {self.stock_minimo_default}")
            print()
            print("1. Cambiar usuario")
            print("2. Configurar IVA")
            print("3. Configurar stock m√≠nimo por defecto")
            print("4. Gestionar categor√≠as")
            print("5. Gestionar proveedores")
            print("6. Informaci√≥n del sistema")
            print("7. Volver al men√∫ principal")
            
            opcion = input("Opci√≥n: ").strip()
            
            if opcion == "1":
                self._cambiar_usuario()
            elif opcion == "2":
                self._configurar_iva()
            elif opcion == "3":
                self._configurar_stock_minimo()
            elif opcion == "4":
                self._gestionar_categorias()
            elif opcion == "5":
                self._gestionar_proveedores()
            elif opcion == "6":
                self._mostrar_info_sistema()
            elif opcion == "7":
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    
    def _cambiar_usuario(self):
        """Cambiar usuario actual del sistema"""
        print(f"\nüë§ CAMBIAR USUARIO")
        print("="*18)
        print(f"Usuario actual: {self.usuario_actual}")
        print(f"Usuarios disponibles: {', '.join(self.usuarios)}")
        
        nuevo_usuario = input("Nuevo usuario: ").strip()
        if nuevo_usuario in self.usuarios:
            self.usuario_actual = nuevo_usuario
            print(f"‚úÖ Usuario cambiado a: {nuevo_usuario}")
        else:
            print("‚ùå Usuario no v√°lido")
    
    def _configurar_iva(self):
        """Configurar porcentaje de IVA"""
        print(f"\nüí∞ CONFIGURAR IVA")
        print("="*17)
        print(f"IVA actual: {self.iva_porcentaje}%")
        
        try:
            nuevo_iva = float(input("Nuevo porcentaje de IVA: "))
            if 0 <= nuevo_iva <= 50:  # Rango razonable
                self.iva_porcentaje = nuevo_iva
                
                # Recalcular precios con IVA para todos los productos
                for producto in self.productos:
                    producto["precio_con_iva"] = producto["precio_sin_iva"] * (1 + nuevo_iva / 100)
                
                print(f"‚úÖ IVA actualizado a {nuevo_iva}%")
                print("‚úÖ Precios con IVA recalculados para todos los productos")
            else:
                print("‚ùå Porcentaje de IVA debe estar entre 0 y 50")
        except ValueError:
            print("‚ùå Valor inv√°lido")
    
    def _configurar_stock_minimo(self):
        """Configurar stock m√≠nimo por defecto"""
        print(f"\nüìä CONFIGURAR STOCK M√çNIMO POR DEFECTO")
        print("="*38)
        print(f"Stock m√≠nimo actual: {self.stock_minimo_default}")
        
        try:
            nuevo_minimo = int(input("Nuevo stock m√≠nimo por defecto: "))
            if nuevo_minimo >= 0:
                self.stock_minimo_default = nuevo_minimo
                print(f"‚úÖ Stock m√≠nimo por defecto actualizado a {nuevo_minimo}")
                print("‚ÑπÔ∏è Esto solo afecta a nuevos productos")
            else:
                print("‚ùå El stock m√≠nimo no puede ser negativo")
        except ValueError:
            print("‚ùå Valor inv√°lido")
    
    def _gestionar_categorias(self):
        """Gestionar categor√≠as de productos"""
        print(f"\nüìÇ GESTIONAR CATEGOR√çAS")
        print("="*25)
        print(f"Categor√≠as actuales: {', '.join(self.categorias)}")
        print()
        print("1. Agregar categor√≠a")
        print("2. Eliminar categor√≠a")
        print("3. Volver")
        
        opcion = input("Opci√≥n: ").strip()
        
        if opcion == "1":
            nueva_categoria = input("Nueva categor√≠a: ").strip()
            if nueva_categoria and nueva_categoria not in self.categorias:
                self.categorias.append(nueva_categoria)
                print(f"‚úÖ Categor√≠a '{nueva_categoria}' agregada")
            else:
                print("‚ùå Categor√≠a inv√°lida o ya existe")
        
        elif opcion == "2":
            categoria = input("Categor√≠a a eliminar: ").strip()
            if categoria in self.categorias:
                # Verificar si hay productos con esta categor√≠a
                productos_con_categoria = [p for p in self.productos if p["categoria"] == categoria and p["activo"]]
                if productos_con_categoria:
                    print(f"‚ùå No se puede eliminar. Hay {len(productos_con_categoria)} productos con esta categor√≠a")
                else:
                    self.categorias.remove(categoria)
                    print(f"‚úÖ Categor√≠a '{categoria}' eliminada")
            else:
                print("‚ùå Categor√≠a no encontrada")
    
    def _gestionar_proveedores(self):
        """Gestionar proveedores"""
        print(f"\nüè¢ GESTIONAR PROVEEDORES")
        print("="*26)
        print(f"Proveedores actuales: {', '.join(self.proveedores)}")
        print()
        print("1. Agregar proveedor")
        print("2. Eliminar proveedor")
        print("3. Volver")
        
        opcion = input("Opci√≥n: ").strip()
        
        if opcion == "1":
            nuevo_proveedor = input("Nuevo proveedor: ").strip()
            if nuevo_proveedor and nuevo_proveedor not in self.proveedores:
                self.proveedores.append(nuevo_proveedor)
                print(f"‚úÖ Proveedor '{nuevo_proveedor}' agregado")
            else:
                print("‚ùå Proveedor inv√°lido o ya existe")
        
        elif opcion == "2":
            proveedor = input("Proveedor a eliminar: ").strip()
            if proveedor in self.proveedores:
                # Verificar si hay productos con este proveedor
                productos_con_proveedor = [p for p in self.productos if p["proveedor"] == proveedor and p["activo"]]
                if productos_con_proveedor:
                    print(f"‚ùå No se puede eliminar. Hay {len(productos_con_proveedor)} productos de este proveedor")
                else:
                    self.proveedores.remove(proveedor)
                    print(f"‚úÖ Proveedor '{proveedor}' eliminado")
            else:
                print("‚ùå Proveedor no encontrado")
    
    def _mostrar_info_sistema(self):
        """Muestra informaci√≥n del sistema"""
        print(f"\nüñ•Ô∏è INFORMACI√ìN DEL SISTEMA")
        print("="*30)
        print(f"Empresa: {self.nombre_empresa}")
        print(f"Versi√≥n: {self.version}")
        print(f"Usuario actual: {self.usuario_actual}")
        print(f"Total productos: {len(self.productos)}")
        print(f"Productos activos: {len([p for p in self.productos if p['activo']])}")
        print(f"Total movimientos: {len(self.historial_movimientos)}")
        print(f"Categor√≠as: {len(self.categorias)}")
        print(f"Proveedores: {len(self.proveedores)}")
        print(f"IVA configurado: {self.iva_porcentaje}%")
        print(f"Stock m√≠nimo por defecto: {self.stock_minimo_default}")
        
        input("\nPresiona Enter para continuar...")
    
    def _menu_datos(self):
        """Submen√∫ para guardar/cargar datos"""
        print(f"\nüíæ GESTI√ìN DE DATOS")
        print("="*20)
        print("1. Guardar datos")
        print("2. Cargar datos")
        print("3. Volver al men√∫ principal")
        
        opcion = input("Opci√≥n: ").strip()
        
        if opcion == "1":
            self._guardar_datos()
        elif opcion == "2":
            self._cargar_datos()
        elif opcion == "3":
            pass
        else:
            print("‚ùå Opci√≥n no v√°lida")
    
    def _guardar_datos(self):
        """Guarda todos los datos del sistema"""
        try:
            data = {
                "sistema": {
                    "version": self.version,
                    "empresa": self.nombre_empresa,
                    "fecha_guardado": datetime.datetime.now().isoformat(),
                    "usuario": self.usuario_actual
                },
                "productos": self.productos,
                "movimientos": self.historial_movimientos,
                "configuracion": {
                    "categorias": self.categorias,
                    "proveedores": self.proveedores,
                    "usuarios": self.usuarios,
                    "iva_porcentaje": self.iva_porcentaje,
                    "stock_minimo_default": self.stock_minimo_default,
                    "siguiente_id_producto": self.siguiente_id_producto,
                    "siguiente_id_movimiento": self.siguiente_id_movimiento
                }
            }
            
            with open(self.archivo_datos, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Datos guardados en: {self.archivo_datos}")
            
        except Exception as e:
            print(f"‚ùå Error al guardar: {e}")
    
    def _cargar_datos(self):
        """Carga datos del sistema desde archivo"""
        try:
            with open(self.archivo_datos, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Cargar datos
            self.productos = data.get("productos", [])
            self.historial_movimientos = data.get("movimientos", [])
            
            # Cargar configuraci√≥n
            config = data.get("configuracion", {})
            self.categorias = config.get("categorias", self.categorias)
            self.proveedores = config.get("proveedores", self.proveedores)
            self.usuarios = config.get("usuarios", self.usuarios)
            self.iva_porcentaje = config.get("iva_porcentaje", self.iva_porcentaje)
            self.stock_minimo_default = config.get("stock_minimo_default", self.stock_minimo_default)
            self.siguiente_id_producto = config.get("siguiente_id_producto", self.siguiente_id_producto)
            self.siguiente_id_movimiento = config.get("siguiente_id_movimiento", self.siguiente_id_movimiento)
            
            sistema_info = data.get("sistema", {})
            fecha_guardado = sistema_info.get("fecha_guardado", "N/A")
            
            print(f"‚úÖ Datos cargados exitosamente")
            print(f"   Fecha guardado: {fecha_guardado[:19] if fecha_guardado != 'N/A' else 'N/A'}")
            print(f"   Productos cargados: {len(self.productos)}")
            print(f"   Movimientos cargados: {len(self.historial_movimientos)}")
            
        except FileNotFoundError:
            print(f"‚ùå Archivo no encontrado: {self.archivo_datos}")
        except json.JSONDecodeError:
            print(f"‚ùå Error en el formato del archivo")
        except Exception as e:
            print(f"‚ùå Error al cargar: {e}")
    
    # M√©todos auxiliares
    def _buscar_producto_por_id(self, producto_id):
        """Busca un producto por ID"""
        for producto in self.productos:
            if producto["id"] == producto_id:
                return producto
        return None
    
    def _registrar_movimiento(self, tipo, producto_id, cantidad, motivo):
        """Registra un movimiento en el historial"""
        movimiento = {
            "id": self.siguiente_id_movimiento,
            "fecha": datetime.datetime.now().isoformat(),
            "tipo": tipo,
            "producto_id": producto_id,
            "cantidad": cantidad,
            "motivo": motivo,
            "usuario": self.usuario_actual
        }
        
        self.historial_movimientos.append(movimiento)
        self.siguiente_id_movimiento += 1

def main():
    """Funci√≥n principal del sistema"""
    try:
        print("üèõÔ∏è INICIANDO SISTEMA DE INVENTARIO MONOL√çTICO")
        print("="*50)
        
        # Crear e inicializar sistema
        sistema = SistemaInventarioMonolitico()
        
        # Mostrar men√∫ principal
        sistema.mostrar_menu_principal()
        
    except KeyboardInterrupt:
        print("\n\nüëã Sistema interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico del sistema: {e}")
        print("Por favor, contacte al administrador")

if __name__ == "__main__":
    main()
